#lang racket
(define myList '())

(define add
      (lambda (new-item)
         (set! myList
               (cons new-item myList))
        myList)
  )

(define (insertAtFront elt lst)
  (map (lambda (x)
         (cons elt x))
       lst)
 )

(define (makeList n)
  (if (= n 0)
      null
      (cons n (makeList (- n 1))))
  )

(define (count num)
  (cond
    ((equal? num '()) 0)
    ( #t (+ 1 (count (cdr num)))))
  )

(define (trevList list x)
  (if (null? list)
      x
      (trevList (cdr list) (cons (car list) x)))
  )

;Part A
"returns a list of all possible tours with vertices 1 through n"
(define (genTours m)
(if (< m 2)
      null
      (cons (add m) (genTours(- m 1)))
      )
  (insertAtFront 1
  (permutations myList))
  )

;Part B
"takes in list of positions and tour and gives length"
(define (score positions tour)
  (calcDist positions tour (car positions))
)

(define (calcDist positions tour start)
  (if (null? (cdr tour))
      (pytha (getVer positions (car tour)) start)
      (+ (pytha (getVer positions (car tour)) (getVer positions (car (cdr tour)))) (calcDist positions (cdr tour) start)))
  )

(define (getVer points position)
  (if (= position 1)
      (car points)
      (getVer (cdr points) (- position 1)))
)

(define (pytha num1 num2)
  (sqrt (+ (expt (- (car num1) (car num2)) 2) (expt (- (car(cdr num1)) (car(cdr num2))) 2)))
)

;Part C
"takes in list of positions and returns an optimal tour"
(define (etsp positions)
  (calcSmall positions (genTours (length positions)) (score positions (trevList (makeList (length positions)) '())) (trevList (makeList (length positions)) '()))
  )

(define (calcSmall positions lists value best)
  (if (null? (cdr lists))
      (if (< (score positions (car lists)) value)
          (car lists)
          best)
      (if (< (score positions (car lists)) value)
          (calcSmall positions (cdr lists) (score positions (car lists)) (car lists))
          (calcSmall positions (cdr lists) value best)))
  )
