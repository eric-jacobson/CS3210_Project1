;works!!!!
#lang racket
(define myList '())
(define add
      (lambda (new-item)
         (set! myList
               (cons new-item myList))
        myList))

(define (insertAtFront elt lst)
  (map (lambda (x)
         (cons elt x))
       lst))
(define (genTours m)
(if (< m 2)
      null
      (cons (add m) (genTours(- m 1)))
      )
  (insertAtFront 1
  (permutations myList))
  )

(define (add ver1 ver2
  ;(car(car ver1)) + (car(cdr ver2))
  void
  )
)
